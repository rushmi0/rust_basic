<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="DeveloperToolsToolWindowSettingsV1" lastSelectedContentNodeId="notes">
    <developerToolsConfigurations>
      <developerToolConfiguration developerToolId="notes" id="e4a534df-b9e9-43bf-8623-e0d0e7b923ff" name="Workbench">
        <properties>
          <property key="test" type="INPUT" value="kotlin.String|&#10;&#10;&#10;fn main() {&#10;    // การสร้างอ้างอิงและอ้างอิงแบบมิวเทเบิล&#10;    let x = 5;&#10;    let y = &amp;x; // อ้างอิงแบบอิมมิวเทเบิล&#10;    println!(&quot;x: {}&quot;, x); // พิมพ์ค่าของ x&#10;    println!(&quot;y: {}&quot;, y); // พิมพ์ค่าของ y ที่อ้างอิงถึง x&#10;&#10;    let mut a = 10;&#10;    {&#10;        let b = &amp;mut a; // อ้างอิงแบบมิวเทเบิล&#10;        *b += 5; // เปลี่ยนแปลงค่าของ a ผ่าน b&#10;    } // b หมดอายุที่นี่&#10;    println!(&quot;a: {}&quot;, a); // ค่าของ a จะเป็น 15&#10;&#10;    // การใช้งานฟังก์ชันกับการอ้างอิง&#10;    let s = String::from(&quot;Hello&quot;);&#10;    print_message(&amp;s);&#10;    println!(&quot;s: {}&quot;, s); // s ยังสามารถใช้งานได้หลังจากการส่งผ่านการอ้างอิง&#10;&#10;    // การใช้งานฟังก์ชันกับการอ้างอิงแบบมิวเทเบิล&#10;    let mut msg = String::from(&quot;Hello&quot;);&#10;    add_exclamation(&amp;mut msg);&#10;    println!(&quot;msg: {}&quot;, msg); // msg จะเป็น &quot;Hello!&quot;&#10;&#10;    // การใช้อ้างอิงซ้อน&#10;    let z = &amp;&amp;x; // อ้างอิงซ้อน (reference to a reference)&#10;    print_double_ref(z);&#10;&#10;    // การแปลง hex string ไปเป็น &amp;[u8]&#10;    let hex_str = &quot;48656c6c6f&quot;; // &quot;Hello&quot; ใน hex&#10;    let byte_array = hex_to_bytes(hex_str);&#10;    println!(&quot;Byte array: {:?}&quot;, byte_array);&#10;}&#10;&#10;// ฟังก์ชันที่รับการอ้างอิงถึง String&#10;fn print_message(message: &amp;String) {&#10;    println!(&quot;Message: {}&quot;, message);&#10;}&#10;&#10;// ฟังก์ชันที่รับการอ้างอิงแบบมิวเทเบิลถึง String&#10;fn add_exclamation(s: &amp;mut String) {&#10;    s.push_str(&quot;!&quot;);&#10;}&#10;&#10;// ฟังก์ชันที่รับการอ้างอิงซ้อน&#10;fn print_double_ref(val: &amp;&amp;i32) {&#10;    println!(&quot;Value through double reference: {}&quot;, val);&#10;}&#10;&#10;// ฟังก์ชันแปลง hex string ไปเป็น &amp;[u8]&#10;fn hex_to_bytes(hex: &amp;str) -&gt; Vec&lt;u8&gt; {&#10;    (0..hex.len())&#10;        .step_by(2)&#10;        .map(|i| u8::from_str_radix(&amp;hex[i..i + 2], 16).expect(&quot;Invalid hex string&quot;))&#10;        .collect()&#10;}&#10;" />
        </properties>
      </developerToolConfiguration>
    </developerToolsConfigurations>
  </component>
</project>